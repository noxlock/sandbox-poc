doctype html
html(lang="en")
  head
    meta(charset="UTF-8")
    meta(name="viewport" content="width=device-width, initial-scale=1.0")
    title AV Sandbox POC
  body
    h1 Sandbox POC
    form(onsubmit="return submitFile();" method="POST" action="/submit" enctype="multipart/form-data")
      input(type="file" id="myFile" name="filename")
      input(type="submit")

    // Analysis status display
    div#status-container
      button(onclick="checkStatus()") Check Status
      span#countdown-text(style="display:none;") Status will update in 45 seconds...
      br
      span Analysis ID: 
      span#analysis-id Not available
      br
      span Analysis Status: 
      span#analysis-status Not available

    // Analysis results
    div#results
      h2 Analysis Results
      div#results-container
        div#results-header
          div Analysis Results:
          div#analysis-results

    // Script to handle fetching, countdown, and rendering
    script.
      let analysisId;
      let analysisStatus;
      let countdown = 45;
      let countdownInterval;

      // Function to start the countdown and update every second
      const startCountdown = () => {
        clearInterval(countdownInterval); // Clear existing countdown if any
        countdown = 45;

        // Show the countdown text after the analysis ID is available
        document.getElementById('countdown-text').style.display = 'inline';

        document.getElementById('countdown-text').innerText = `Status will update in ${countdown} seconds...`;

        countdownInterval = setInterval(() => {
          countdown -= 1;
          document.getElementById('countdown-text').innerText = `Status will update in ${countdown} seconds...`;

          if (countdown === 0) {
            checkStatus(); // Automatically check status after 45 seconds
          }
        }, 1000);
      };

      // Function to stop the countdown
      const stopCountdown = () => {
        clearInterval(countdownInterval);
        document.getElementById('countdown-text').style.display = 'none'; // Hide countdown when it's no longer needed
      };

      // Function to update results on the page
      const updateResults = (data) => {
        analysisStatus = data.data.attributes.status;
        document.getElementById("analysis-status").innerText = analysisStatus;

        if (analysisStatus === "completed") {
          stopCountdown(); // Stop the countdown once the analysis is completed

          // Detections per category (malicious, suspicious, undetected, etc.)
          const stats = data.data.attributes.stats;
          let resultText = `
            Malicious: ${stats.malicious}, 
            Suspicious: ${stats.suspicious}, 
            Undetected: ${stats.undetected}, 
            Harmless: ${stats.harmless}, 
            Timeout: ${stats.timeout}, 
            Confirmed Timeout: ${stats['confirmed-timeout']}, 
            Failure: ${stats.failure}, 
            Type Unsupported: ${stats['type-unsupported']}
          `;
          document.getElementById("analysis-results").innerText = resultText;
        }
      };

      // On form submit
      const submitFile = () => {
        const file = document.getElementById("myFile").files[0];
        const formData = new FormData();
        formData.append("sample", file);

        // Send file to server
        fetch("/submit", {
          method: "POST",
          body: formData,
        })
        .then((response) => response.json())
        .then((data) => {
          if (data.analysis_id) {
            analysisId = data.analysis_id;
            document.getElementById('analysis-id').innerText = analysisId; // Update the analysis ID in the UI
            startCountdown(); // Start countdown after analysis is submitted
          } else {
            console.log("Error: ", data.errors);
          }
        })
        .catch((error) => {
          console.error("Error:", error);
        });

        return false;
      };

      // Function to check analysis status manually or via countdown
      const checkStatus = () => {
        if (!analysisId) {
          console.log("No analysis ID available.");
          return;
        }

        fetch(`/analysis/${analysisId}`, {
          method: "GET",
          headers: {
            "Content-Type": "application/json",
          },
        })
        .then((response) => response.json())
        .then((data) => {
          updateResults(data);
          if (analysisStatus !== "completed") {
            startCountdown(); // Reset countdown if analysis is not yet completed
          }
        })
        .catch((error) => {
          console.error("Error:", error);
        });
      };
